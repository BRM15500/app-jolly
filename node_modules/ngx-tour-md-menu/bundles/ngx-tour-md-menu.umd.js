(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('ngx-tour-core'), require('@angular/material'), require('withinviewport'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-tour-md-menu', ['exports', 'tslib', '@angular/core', 'ngx-tour-core', '@angular/material', 'withinviewport', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['ngx-tour-md-menu'] = {}),global.tslib,global.ng.core,null,global.ng.material,null,global.Rx.Observable.prototype,global.ng.common));
}(this, (function (exports,tslib_1,core,ngxTourCore,material,withinviewport,operators,common) { 'use strict';

    withinviewport = withinviewport && withinviewport.hasOwnProperty('default') ? withinviewport['default'] : withinviewport;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxmTourService = (function (_super) {
        tslib_1.__extends(NgxmTourService, _super);
        function NgxmTourService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NgxmTourService.decorators = [
            { type: core.Injectable },
        ];
        return NgxmTourService;
    }(ngxTourCore.TourService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TourAnchorOpenerComponent = (function () {
        function TourAnchorOpenerComponent() {
            this.menu = new material.MatMenu(undefined, undefined, { xPosition: 'after', yPosition: 'below', overlapTrigger: true, backdropClass: '' });
        }
        TourAnchorOpenerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tourAnchorOpener',
                        styles: [":host { display: none; }"],
                        template: "<span [matMenuTriggerFor]=\"menu\" #trigger=\"matMenuTrigger\"></span>"
                    },] },
        ];
        /** @nocollapse */
        TourAnchorOpenerComponent.propDecorators = {
            "menu": [{ type: core.Input },],
            "trigger": [{ type: core.ViewChild, args: [material.MatMenuTrigger,] },],
        };
        return TourAnchorOpenerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TourStepTemplateService = (function () {
        function TourStepTemplateService() {
        }
        TourStepTemplateService.decorators = [
            { type: core.Injectable },
        ];
        return TourStepTemplateService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TourBackdropService = (function () {
        function TourBackdropService(rendererFactory) {
            this.renderer = rendererFactory.createRenderer(null, null);
        }
        /**
         * @param {?} targetElement
         * @return {?}
         */
        TourBackdropService.prototype.show = /**
         * @param {?} targetElement
         * @return {?}
         */
            function (targetElement) {
                var /** @type {?} */ boundingRect = targetElement.nativeElement.getBoundingClientRect();
                if (!this.backdropElement) {
                    this.backdropElement = this.renderer.createElement('div');
                    this.renderer.addClass(this.backdropElement, 'ngx-tour_backdrop');
                    this.renderer.appendChild(document.body, this.backdropElement);
                }
                this.setStyles(boundingRect);
            };
        /**
         * @return {?}
         */
        TourBackdropService.prototype.close = /**
         * @return {?}
         */
            function () {
                if (this.backdropElement) {
                    this.renderer.removeChild(document.body, this.backdropElement);
                    this.backdropElement = null;
                }
            };
        /**
         * @param {?} boundingRect
         * @return {?}
         */
        TourBackdropService.prototype.setStyles = /**
         * @param {?} boundingRect
         * @return {?}
         */
            function (boundingRect) {
                var /** @type {?} */ styles = {
                    position: 'fixed',
                    width: boundingRect.width + 'px',
                    height: boundingRect.height + 'px',
                    top: boundingRect.top + 'px',
                    left: boundingRect.left + 'px',
                    'box-shadow': '0 0 0 9999px rgba(0, 0, 0, 0.7)',
                    'z-index': '100'
                };
                try {
                    for (var _a = tslib_1.__values(Object.keys(styles)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var name_1 = _b.value;
                        this.renderer.setStyle(this.backdropElement, name_1, styles[name_1]);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                var e_1, _c;
            };
        TourBackdropService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        TourBackdropService.ctorParameters = function () {
            return [
                { type: core.RendererFactory2, },
            ];
        };
        return TourBackdropService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TourAnchorMatMenuDirective = (function () {
        function TourAnchorMatMenuDirective(componentFactoryResolver, injector, viewContainer, element, tourService, tourStepTemplate, tourBackdrop) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.injector = injector;
            this.viewContainer = viewContainer;
            this.element = element;
            this.tourService = tourService;
            this.tourStepTemplate = tourStepTemplate;
            this.tourBackdrop = tourBackdrop;
            this.opener = this.viewContainer.createComponent(this.componentFactoryResolver.resolveComponentFactory(TourAnchorOpenerComponent)).instance;
        }
        /**
         * @return {?}
         */
        TourAnchorMatMenuDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.tourService.register(this.tourAnchor, this);
            };
        /**
         * @return {?}
         */
        TourAnchorMatMenuDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.tourService.unregister(this.tourAnchor);
            };
        /**
         * @param {?} step
         * @return {?}
         */
        TourAnchorMatMenuDirective.prototype.showTourStep = /**
         * @param {?} step
         * @return {?}
         */
            function (step) {
                var _this = this;
                this.isActive = true;
                this.tourStepTemplate.templateComponent.step = step;
                // Ignore step.placement
                if (!step.preventScrolling) {
                    if (!withinviewport(this.element.nativeElement, { sides: 'bottom' })) {
                        ((this.element.nativeElement)).scrollIntoView(false);
                    }
                    else if (!withinviewport(this.element.nativeElement, { sides: 'left top right' })) {
                        ((this.element.nativeElement)).scrollIntoView(true);
                    }
                }
                ((this.opener.trigger))._element = this.element;
                this.opener.trigger.menu = this.tourStepTemplate.templateComponent.tourStep;
                this.opener.trigger.ngAfterContentInit();
                this.opener.trigger.openMenu();
                if (step.enableBackdrop) {
                    this.tourBackdrop.show(this.element);
                }
                else {
                    this.tourBackdrop.close();
                }
                step.prevBtnTitle = step.prevBtnTitle || 'Prev';
                step.nextBtnTitle = step.nextBtnTitle || 'Next';
                step.endBtnTitle = step.endBtnTitle || 'End';
                if (this.menuCloseSubscription) {
                    this.menuCloseSubscription.unsubscribe();
                }
                this.menuCloseSubscription = this.opener.trigger.menuClosed
                    .pipe(operators.first())
                    .subscribe(function () {
                    if (_this.tourService.getStatus() !== ngxTourCore.TourState.OFF) {
                        _this.tourService.end();
                    }
                    _this.tourBackdrop.close();
                });
            };
        /**
         * @return {?}
         */
        TourAnchorMatMenuDirective.prototype.hideTourStep = /**
         * @return {?}
         */
            function () {
                this.isActive = false;
                if (this.menuCloseSubscription) {
                    this.menuCloseSubscription.unsubscribe();
                }
                this.opener.trigger.closeMenu();
                if (this.tourService.getStatus() === ngxTourCore.TourState.OFF) {
                    this.tourBackdrop.close();
                }
            };
        TourAnchorMatMenuDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[tourAnchor]'
                    },] },
        ];
        /** @nocollapse */
        TourAnchorMatMenuDirective.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver, },
                { type: core.Injector, },
                { type: core.ViewContainerRef, },
                { type: core.ElementRef, },
                { type: NgxmTourService, },
                { type: TourStepTemplateService, },
                { type: TourBackdropService, },
            ];
        };
        TourAnchorMatMenuDirective.propDecorators = {
            "tourAnchor": [{ type: core.Input },],
            "isActive": [{ type: core.HostBinding, args: ['class.touranchor--is-active',] },],
        };
        return TourAnchorMatMenuDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TourStepTemplateComponent = (function (_super) {
        tslib_1.__extends(TourStepTemplateComponent, _super);
        function TourStepTemplateComponent(tourStepTemplateService, tourService) {
            var _this = _super.call(this, tourService) || this;
            _this.tourStepTemplateService = tourStepTemplateService;
            _this.tourService = tourService;
            _this.step = {};
            return _this;
        }
        /**
         * @return {?}
         */
        TourStepTemplateComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.tourStepTemplateService.templateComponent = this;
            };
        TourStepTemplateComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tour-step-template',
                        styles: ["\n      ::ng-deep .tour-step .mat-menu-content { \n          padding: 0 !important; \n      }\n  "],
                        template: "\n    <mat-menu [overlapTrigger]=\"false\" class=\"tour-step\">\n      <ng-container *ngTemplateOutlet=\"stepTemplate || defaultTemplate; context: { step: step }\"></ng-container>\n    </mat-menu>\n    <ng-template #defaultTemplate let-step=\"step\">\n      <mat-card (click)=\"$event.stopPropagation()\">\n        <mat-card-title>\n          {{step?.title}}\n        </mat-card-title>\n        <mat-card-content>\n          {{step?.content}}\n        </mat-card-content>\n        <mat-card-actions>\n          <button mat-icon-button [disabled]=\"!tourService.hasPrev(step)\" (click)=\"tourService.prev()\">\n            <mat-icon>chevron_left</mat-icon>\n          </button>\n          <button mat-icon-button [disabled]=\"!tourService.hasNext(step)\" (click)=\"tourService.next()\">\n            <mat-icon>chevron_right</mat-icon>\n          </button>\n          <button mat-button (click)=\"tourService.end()\">{{step?.endBtnTitle}}</button>\n        </mat-card-actions>\n      </mat-card>\n    </ng-template>\n  ",
                    },] },
        ];
        /** @nocollapse */
        TourStepTemplateComponent.ctorParameters = function () {
            return [
                { type: TourStepTemplateService, },
                { type: NgxmTourService, },
            ];
        };
        TourStepTemplateComponent.propDecorators = {
            "tourStep": [{ type: core.ViewChild, args: [material.MatMenu,] },],
            "stepTemplate": [{ type: core.Input }, { type: core.ContentChild, args: [core.TemplateRef,] },],
        };
        return TourStepTemplateComponent;
    }(ngxTourCore.TourHotkeyListenerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TourMatMenuModule = (function () {
        function TourMatMenuModule() {
        }
        /**
         * @return {?}
         */
        TourMatMenuModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: TourMatMenuModule,
                    providers: tslib_1.__spread([
                        TourStepTemplateService,
                        TourBackdropService
                    ], ngxTourCore.TourModule.forRoot().providers, [
                        NgxmTourService
                    ]),
                };
            };
        TourMatMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [TourAnchorMatMenuDirective, TourStepTemplateComponent, TourAnchorOpenerComponent],
                        entryComponents: [TourAnchorOpenerComponent],
                        exports: [TourAnchorMatMenuDirective, TourStepTemplateComponent, ngxTourCore.TourModule],
                        imports: [common.CommonModule, ngxTourCore.TourModule,
                            material.MatMenuModule, material.MatCardModule, material.MatButtonModule, material.MatIconModule,
                        ],
                    },] },
        ];
        return TourMatMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.TourService = NgxmTourService;
    exports.TourMatMenuModule = TourMatMenuModule;
    exports.TourAnchorMatMenuDirective = TourAnchorMatMenuDirective;
    exports.TourStepTemplateComponent = TourStepTemplateComponent;
    exports.ɵa = NgxmTourService;
    exports.ɵd = TourAnchorOpenerComponent;
    exports.ɵc = TourBackdropService;
    exports.ɵb = TourStepTemplateService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,